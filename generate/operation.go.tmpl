// The query or mutation executed by {{.Name}}.
const {{.Name}}_Operation = `{{$.Body}}`

{{.Doc}}
func (c GandalfClient){{funcName .Name}}(
    {{if ne .Config.ContextType "-" -}}
    ctx_ {{ref .Config.ContextType}},
    {{end}}
    {{- if .Input -}}
    {{- range .Input.Fields -}}
    {{/* the GraphQL name here is the user-specified variable-name */ -}}
    {{.GraphQLName}} {{.GoType.Reference}},
    {{end -}}
    {{end -}}
) (*{{.ResponseName}}, {{if .Config.Extensions -}}map[string]interface{},{{end}} error) {
    req := {{importAlias "github.com/machinebox/graphql"}}.NewRequest({{.Name}}_Operation)
  
    {{range .Input.Fields -}}
        req.Var("{{.JSONName}}", {{.GraphQLName}})
    {{end -}}

     requestBodyObj := struct {
		Query     string                 `json:"query"`
		Variables map[string]interface{} `json:"variables"`
	}{
		Query:     req.Query(),
		Variables: req.Vars(),
	}

    var requestBody bytes.Buffer
	if err := json.NewEncoder(&requestBody).Encode(requestBodyObj); err != nil {
		return nil, fmt.Errorf("unable to encode body %s", err)
	}

    var err_ error	
    signatureB64, err_ := SignMessageAsBase64(c.privateKey, requestBody.Bytes())
    if err_ != nil {
		return nil, fmt.Errorf("unable to generate signature: %v", err_)
	}

	req.Header.Set("X-Gandalf-Signature", signatureB64)

	var data_ {{.ResponseName}}
	resp_ := &graphql.Response{Data: &data_}

	if err_ := c.client.Run( 
        {{if ne .Config.ContextType "-"}}ctx_{{else}}nil{{end}}, 
        req, 
        &resp_,
    ); err_ != nil {
		return nil, fmt.Errorf("failed to execute request: %v", err_)
	}

	return &data_, nil
}
